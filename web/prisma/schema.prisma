generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id             String           @id @default(cuid())
  parentId       String?
  name           String
  slug           String           @unique
  path           String           @unique
  sort           Int              @default(500)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  seoCanonical   String?
  seoDescription String?
  seoH1          String?
  seoIntroHtml   String?
  seoNoindex     Boolean          @default(false)
  seoTitle       String?
  seoUpdatedAt   DateTime?        @default(now())
  parent         Category?        @relation("CatToParent", fields: [parentId], references: [id])
  children       Category[]       @relation("CatToParent")
  products       Product[]
  draftProducts  WaDraftProduct[]

  @@index([parentId])
}

model Product {
  id                    String         @id @default(cuid())
  slug                  String         @unique
  name                  String
  article               String?
  categoryId            String
  pricePair             Decimal
  currency              String         @default("RUB")
  material              String?
  gender                Gender?
  season                Season?
  description           String?
  availabilityCheckedAt DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  isActive              Boolean        @default(true)
  sizes                 Json?
  sourceMessageIds      Json?
  analysisBatchId       String?        @unique
  colorBatchId          String?        @unique
  batchProcessingStatus String?        @default("pending")
  activeUpdatedAt       DateTime       @default(now())
  gptRequest            String?
  gptResponse           String?
  providerId            String?
  source                ProductSource  @default(WA)
  orderItems            OrderItem[]
  category              Category       @relation(fields: [categoryId], references: [id])
  provider              Provider?      @relation(fields: [providerId], references: [id])
  images                ProductImage[]
  purchaseItems         PurchaseItem[]
  reviews               Review[]

  @@index([categoryId])
  @@index([season])
  @@index([pricePair])
  @@index([isActive])
  @@index([activeUpdatedAt])
  @@index([providerId])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  key       String? @unique
  alt       String?
  sort      Int     @default(0)
  isPrimary Boolean @default(false)
  color     String?
  width     Int?
  height    Int?
  isActive  Boolean @default(true)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, sort])
}

model Provider {
  id            String            @id @default(cuid())
  name          String            @unique
  phone         String?
  place         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  products      Product[]
  users         User[]
  draftProducts WaDraftProduct[]
  messages      WhatsAppMessage[]

  @@index([name])
  @@index([phone])
  @@index([place])
}

model WaDraftProduct {
  id               String                @id @default(cuid())
  messageId        String                @unique
  providerId       String
  name             String?
  pricePair        Decimal?
  currency         String                @default("RUB")
  material         String?
  gender           Gender?
  season           Season?
  description      String?
  sizes            Json?
  providerDiscount Decimal?
  rawGptResponse   Json?
  gptRequest       String?
  rawGptResponse2  Json?
  gptRequest2      String?
  source           Json?
  color            String?
  categoryId       String?
  status           String                @default("draft")
  isDeleted        Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  aiProcessedAt    DateTime?
  aiStatus         String?
  article          String?
  aiConfidence     Float?
  aiContext        String?
  gptResponse1     Json?
  gptResponse2     Json?
  category         Category?             @relation(fields: [categoryId], references: [id])
  message          WhatsAppMessage       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  provider         Provider              @relation(fields: [providerId], references: [id])
  images           WaDraftProductImage[]

  @@index([providerId])
  @@index([status])
  @@index([createdAt])
  @@index([categoryId])
  @@index([isDeleted])
}

model WaDraftProductImage {
  id             String         @id @default(cuid())
  draftProductId String
  url            String
  key            String?        @unique
  mimeType       String?
  sha256         String?
  alt            String?
  sort           Int            @default(0)
  isPrimary      Boolean        @default(false)
  isFalseImage   Boolean        @default(false)
  color          String?
  width          Int?
  height         Int?
  createdAt      DateTime       @default(now())
  isActive       Boolean        @default(true)
  draftProduct   WaDraftProduct @relation(fields: [draftProductId], references: [id], onDelete: Cascade)

  @@index([draftProductId, sort])
}

model WhatsAppMessage {
  id             String          @id @default(cuid())
  waMessageId    String          @unique
  from           String?
  type           String?
  source         String?
  chatId         String?
  fromMe         Boolean         @default(false)
  fromName       String?
  timestamp      BigInt?
  mediaId        String?
  mediaWidth     Int?
  mediaHeight    Int?
  mediaSha256    String?
  mediaPreview   String?
  mediaFileSize  Int?
  mediaMimeType  String?
  text           String?
  mediaS3Key     String?
  mediaUrl       String?
  providerId     String?
  processed      Boolean         @default(false)
  rawPayload     Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  draftProductId String?
  aiGroupId      String?
  draftProduct   WaDraftProduct?
  provider       Provider?       @relation(fields: [providerId], references: [id])

  @@index([createdAt])
  @@index([from])
  @@index([type])
  @@index([fromMe])
  @@index([chatId])
  @@index([timestamp])
  @@index([providerId])
}

model User {
  id                 String                 @id @default(cuid())
  email              String?                @unique
  phone              String?                @unique
  name               String?
  role               Role
  providerId         String?
  passwordHash       String?
  emailVerified      DateTime?
  image              String?
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  label              String?
  accounts           Account[]
  gruzchikOrders     Order[]                @relation("OrderGruzchik")
  orders             Order[]
  feedbacks          OrderItemFeedback[]
  messages           OrderItemMessage[]
  messageReads       OrderItemMessageRead[]
  adminReplacements  OrderItemReplacement[] @relation("AdminReplacement")
  clientReplacements OrderItemReplacement[] @relation("ClientReplacement")
  purchases          Purchase[]
  reviews            Review[]
  searchHistory      SearchHistory[]
  sessions           Session[]
  provider           Provider?              @relation(fields: [providerId], references: [id])

  @@index([role])
  @@index([providerId])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String?
  rating      Int
  title       String?
  comment     String?
  name        String?
  email       String?
  isVerified  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([rating])
  @@index([isPublished])
  @@index([createdAt])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String?
  gruzchikId    String?
  fullName      String?
  phone         String
  email         String?
  address       String?
  transportId   String?
  transportName String?
  subtotal      Decimal     @default(0)
  total         Decimal     @default(0)
  status        String      @default("Новый")
  label         String?
  payment       Decimal     @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comment       String?
  gruzchik      User?       @relation("OrderGruzchik", fields: [gruzchikId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])
  items         OrderItem[]
  transportOptions OrderTransportOption[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([orderNumber])
  @@index([gruzchikId])
}

model OrderItem {
  id           String                 @id @default(cuid())
  orderId      String
  productId    String
  slug         String
  name         String
  article      String?
  priceBox     Decimal
  qty          Int
  itemCode     String?                @unique
  color        String?
  createdAt    DateTime               @default(now())
  isAvailable  Boolean?
  order        Order                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product                @relation(fields: [productId], references: [id])
  feedbacks    OrderItemFeedback[]
  messages     OrderItemMessage[]
  replacements OrderItemReplacement[]

  @@index([orderId])
  @@index([productId])
  @@index([itemCode])
}

model OrderTransportOption {
  id          String   @id @default(cuid())
  orderId     String
  transportId String
  transportName String
  isSelected  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transportId])
}

model OrderItemMessage {
  id          String                 @id @default(cuid())
  orderItemId String
  userId      String
  text        String?
  isService   Boolean                @default(false)
  attachments Json?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  orderItem   OrderItem              @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  readBy      OrderItemMessageRead[]

  @@index([orderItemId])
  @@index([userId])
  @@index([createdAt])
}

model OrderItemMessageRead {
  id        String           @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime         @default(now())
  message   OrderItemMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([readAt])
}

model ParsingHistory {
  id              String    @id @default(cuid())
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  status          String    @default("running")
  messagesRead    Int       @default(0)
  productsCreated Int       @default(0)
  errorMessage    String?
  duration        Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  triggeredBy     String?
  reason          String?

  @@index([startedAt])
  @@index([status])
  @@index([createdAt])
  @@index([triggeredBy])
}

model MigrationHistory {
  id         String   @id @default(cuid())
  name       String   @unique
  executedAt DateTime @default(now())

  @@map("MigrationHistory")
}

model GptBatchJob {
  id            String   @id @default(cuid())
  type          String
  status        String   @default("pending")
  batchId       String?  @unique
  inputFileId   String?
  outputFileId  String?
  totalRequests Int?     @default(0)
  completed     Int?     @default(0)
  failed        Int?     @default(0)
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([status])
  @@index([type])
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([query])
  @@index([createdAt])
}

model OrderItemFeedback {
  id            String       @id @default(cuid())
  orderItemId   String
  userId        String
  feedbackType  FeedbackType
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  refusalReason String?
  orderItem     OrderItem    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
  @@index([userId])
}

model OrderItemReplacement {
  id                  String            @id @default(cuid())
  orderItemId         String
  adminUserId         String
  clientUserId        String
  replacementImageUrl String?
  replacementImageKey String?
  status              ReplacementStatus @default(PENDING)
  adminComment        String?
  clientComment       String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  adminUser           User              @relation("AdminReplacement", fields: [adminUserId], references: [id], onDelete: Cascade)
  clientUser          User              @relation("ClientReplacement", fields: [clientUserId], references: [id], onDelete: Cascade)
  orderItem           OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
  @@index([adminUserId])
  @@index([clientUserId])
}

model WebhookStatus {
  id             String   @id @default(cuid())
  isConnected    Boolean
  lastCheck      DateTime @default(now())
  errorMessage   String?
  instanceStatus String?
  createdAt      DateTime @default(now())

  @@index([lastCheck])
  @@index([isConnected])
}

model Purchase {
  id          String         @id @default(cuid())
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  createdBy   User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  items       PurchaseItem[]

  @@index([createdById])
  @@index([createdAt])
}

model PurchaseItem {
  id          String   @id @default(cuid())
  purchaseId  String
  productId   String
  name        String
  description String
  price       Decimal
  oldPrice    Decimal
  sortIndex   Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@index([productId])
  @@index([sortIndex])
}

enum Role {
  ADMIN
  PROVIDER
  GRUZCHIK
  CLIENT
}

enum Gender {
  FEMALE
  MALE
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
}

enum FeedbackType {
  WRONG_SIZE
  WRONG_ITEM
  AGREE_REPLACEMENT
}

enum ReplacementStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ProductSource {
  WA
  AG
}
